Homework 5, Activity 1:  Learning to use Valgrind

*********************************************************************
: 3 points

Name: Miguel Dias Pinto
*********************************************************************

Instructions
------------

These questions deal with the program found in explore.c, cave.c and
traverse.c.  A compiled binary of a working version of the program has
been supplied in the load module named 'goodexplore' is supplied;
run this solution to see how the program should behave.  Be sure to
experiment with the program to try out all of its commands, and to see
how it deals with problems such as invalid commands, problems reading the
cave description file, etc.

Each numbered section, 1, 2, ..., is a step on the path to a solution.
Each section has questions, a., b., ..., to answer in sequence.

Answering these questions will require switching between running
GDB, running Valgrind, and examining code. It will be helpful to
have a second shell window open; run Valgrind in the first window, and
execute other commands (such as "more" or an editor) in a second window.

==========================================================================
=> Do not change the code until this text says to do so.  Otherwise,
=  changes may make it difficult/impossible to answer the questions.
=
=> All changes you will need to make will be made to the C implementation
=  files.  You should not need to modify any of the header files for this
=  assignment.
==========================================================================

Begin by using 'gmakemake' to create your Makefile, then run 'make' to
create the 'explore' load module.  Note, but take no action about, any
warning messages you may get from the compiler.

Questions
---------

1.  Run './explore' without GDB or Valgrind and observe its behavior.

  a. When the program is run with no file name, what happens?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	Segmentation fault

  b. Is this error repeatable (i.e., if you run the program the same way
     again, does the problem recur, or does it only happen occasionally)?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	It is repeatable

  c. What happens if you give it the name of a file that doesn't exist?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	Also a segmentation fault
==========================================================================
=> Correct any errors that were indicated during the compilation
=  process and recompile the program.  Ensure that no warning messages
=  are produced by the compiler, and verify that you have corrected any
=  problem(s) those messages indicated.  At this point, 'explore' should
=  behave exactly the same way as 'goodexplore' when invoked without an
=  argument or with the name of a file that doesn't exist as the argument.
=
=> Indicate these fixes by putting "Fix1" in a comment line in each
=> place where you have corrected the code.
==========================================================================

2.  Run './explore cave1.txt' without GDB or Valgrind and observe it.

  a. What happens when you give it the sequence of moves suggested in the
     assignment writeup?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	You walk through the cave, pickup the key, find the door and exit.

  b. What happens if you give it an invalid command (e.g., 'U')?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	"Sorry I don't know what <invalid command> means"

  c. What happens if you give it a valid direction command, but there is
     no tunnel in that direction?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	Also a segmentation fault

3.  Re-run the program using GDB, and determine why it is blowing up when
    given a command to move in an impossible direction.

  a. Which statement was executing when the fault occurred?  Copy and
     paste the two lines printed by GDB after the fault.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	The Statement int num = cell->number;

	0x0000555555555973 in report (cell=0x0) at cave.c:260
	260         int num = cell->number;

  b. What does the backtrace from that point show as the calling sequence?
     Copy and paste the frames from the trace below.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)

	#0  0x0000555555555973 in report (cell=0x0) at cave.c:260
	#1  0x0000555555555f4a in traverse (entry=0x55555555c930, 
	    in=0x7ffff7f9a980 <_IO_2_1_stdin_>) at traverse.c:52
	#2  0x00005555555554d6 in main (argc=2, argv=0x7fffffffe8b8)
	    at explore.c:44	

4.  The runtime fault occurs at the point where the error is detected,
    but that is not where the error in the code actually occurs.  Using
    the GDB 'frame N' command to move to frame #N, or using 'up' and/or
    'down' to move through the frames.  In each frame, you can use the
    GDB 'list' command to list 10 lines of code around the relevant
    statements in each frame, and can continue giving 'list' commands
    to look at subsequent statements in the code, 10 at a time.

  a. Where does the erroneous value that caused the fault actually come
     from, where is it assigned to the variable whose contents are
     being passed as a parameter?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	The parameter cell can be null. This is the issue

  b. Look back at the output from the program right before the fault
     occurred, and find that place in the code.  It appears that the
     code actually did detect the problem, but did not use that
     information to prevent the fault from occurring.  Why not?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	Because the if statements come afterwards everything...
==========================================================================
=> Correct that error, recompile, and re-test to verify your fix.
=
=> Indicate these fixes by putting "Fix2" in a comment line in each
=> place where you have corrected the code.
==========================================================================

5. Now run the program under control of Valgrind.  When prompted for a
   command, enter 'Q' to immediately exit.

   Study the Valgrind output organization and its "SUMMARY" parts.
   Valgrind reports errors as they occur to standard error.  Each error
   occurrence has an information section with details for analysis:

     "HEAP SUMMARY" lists usage of dynamically allocated memory blocks.

     "LEAK SUMMARY" lists leaks - allocated blocks not freed at termination.
     Each leak has a "loss record" with details on the memory origin.

     "ERROR SUMMARY" lists total errors and the number of error "contexts".

  a. In "LEAK SUMMARY", how many bytes are reported as "definitely lost"?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	48 bytes in 1 block

  b. In "HEAP SUMMARY", how many bytes were in use when the program terminated?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	1,280 bytes in 27 blocks

  c. In "HEAP SUMMARY", how many allocation/deallocation calls were made?

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	32 allocs, 5 frees, 11,696 bytes allocated

  d. List the different errors reported by Valgrind, and how many of
     each type occurs.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	"Invalid Write of size 1" - 2 times
	"Address ____ is x bytes after a block of size y" - 2 times
	"Conditional jump or move depends on uninitialized v" - 7 times
	"Use of uninitialized value of size 8" - 1 time

  e. What does "Invalid write of size 1" mean, and why is it a problem?
     (Look at the lines of code identified in the Valgrind error messages
     for some idea of what the program is trying to do that caused this
     error.)

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	It seems like it is a problem with the memory allocation, There wasn't enough memory allocated.

  f. What do "Use of uninitialized value" and "Conditional jump or move
     depends on uninitialized value(s)" mean, and why are they problems?
     (Again, look at identified lines of code for hints.)

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	Use of uninitialized value, means you use a value that wasn't initialized and could lead to wrong output/errors.
	Conditional jump/move depends on Uninitialized value means the program is calling an uninitialized value. This again means you could run into errors with unknown outputs/errors.

  g. In which FUNCTIONS did Valgrind detect "Invalid" access errors? List them.

      Information in the "at ..." line identifies the detection point, and
      information in the first "by ..." line identifies the calling function.
      Each reported error includes the function, file name and line number
      at which Valgrind detected the invalid access error.

      Enter the information of each unique "by" line for this answer.
      There are multiple functions for this answer.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)
	by 0x109922: process (cave.c:220)
==2473520==    by 0x109EDF: build_cave (cave.c:419)
==2473520==    by 0x10948A: main (explore.c:36)

  h. Which statements are the origin of these memory allocations?

      Each error has an "Address" section that reports where the code
      allocated the memory whose access was faulty.

      Use the information in the first "by..." line under the "Address" to
      get the statements, and enter the statements below for the answer.
      There are multiple statements for this answer.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)


  i. What is the root cause of the invalid access errors? Explain IN ENGLISH.
      Identifying root causes of invalid accesses requires some analysis.
      Review the file "cave.h" to understand the structure of a cave cell
      and to identify its memory requirements.  Also examine the code
      around the offending lines.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)

========================================================================
=> Given the knowledge gained, do this to fix invalid accesses:
=    - edit the code to correct the errors;
=    - rebuild;
=    - retest the program with Valgrind;
=    - add and commit to version control; and
=    - loop until no invalid memory access errors are present.
=
=> Indicate these fixes by putting "Fix3" in a comment line in each
=> place where you have corrected the code.
========================================================================

6. Run Valgrind to study and fix "Use of uninitialized..." errors.

  a. What is the root cause of this error? What change is needed?

      Use Valgrind output to identify what needs initialization and locate
      the place(s) to add it.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)

7. Run Valgrind to study and fix "Conditional..." errors.

  a. What is the root cause of this error? What change is needed?

      Use Valgrind output to identify what needs initialization and locate
      the place(s) to add it.  (HINT: a change to one line of code will
      actually correct all of these.)

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)

========================================================================
=> Given the knowledge gained, do this to fix "uninitialized" errors:
=   - implement the changes to correct the errors;
=   - rebuild;
=   - retest the program with Valgrind;
=   - add and commit to version control; and
=   - loop until no "uninitialized" and no "Conditional" errors exist.
=
=>  At this point, the program should produce only memory leak errors
=   and "in use at exit" bytes.
=
=> Indicate these fixes by putting "Fix4" in a comment line in each
=> place where you have corrected the code.
========================================================================


8. Run Valgrind to eliminate lost blocks of memory and blocks that are
   still in use at exit that are described in "HEAP SUMMARY".  You may
   find the additional Valgrind option "--show-leak-kinds=all" to be
   helpful in identifying blocks that are still in use.

  a. Which functions called malloc() that resulted in later memory leaks?

      List the function, file, and line number for each function that
      allocates memory that leads to a later memory leak.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)


  b. What changes are needed to correct each leak problem? Explain IN ENGLISH.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)


  c. Where is the logical place to deallocate leaked memory? Explain IN ENGLISH.

      :  3 points
      <<< YOUR ANSWER BELOW HERE (and do not remove this line)


========================================================================
=> Make the necessary changes to the code to correct the leaks.
=> Finally do this to fix memory leaks:
=  - implement the changes to correct the errors;
=  - rebuild;
=  - retest the program with Valgrind;
=  - add and commit to version control; and
=  - loop until Valgrind output reports no errors and no leaks.

=  At this point, the program should run successfully to completion, and
=  there should be no memory management errors detected by Valgrind.
=
=> Indicate these fixes by putting "Fix5" in a comment line in each
=> place where you have corrected the code.
========================================================================

